: # -*-Perl-*-
eval 'exec perl -w "$0" ${1+"$@"}'
   if 0;

use Asim;
use strict;

##
## Generate cfg files for Alpha tests
##

my $gcfg = Asim::GenCFG->new();

my @bmarks = (
    "bitops_tests/bitops_tests",
    "fp/fp_simple_double",
    "fp/fp_simple_float",
    "hello/hello",
    "loop_inf_null/loop_inf_null",
    "memory_tests/memory_tests_aligned",
    "memory_tests/memory_tests_unaligned",
    );
	      
my @bmarks_shared_mem = (
    "memory_tests/shared_counter_incr",
    );
	      
for (my $num_contexts = 1; $num_contexts <= 64; $num_contexts *= 2) {
    foreach my $bm (@bmarks) {
        my ($dir, $bmark) = split('/', $bm);

        my $bm_name = sprintf("%s_%03dt", $bmark, $num_contexts);

        $gcfg->add(name => $bm_name,
                   tree => [ "user_mode" ],
                   setup => "tools/scripts/bmark/setup-hasim-bmark $bm_name --group tests/$dir --isa alpha --binary ${bmark}.alpha.bin --contexts=${num_contexts}",
                   feeder => "m5",
                   feedflags => "m5_configs/se.py --hasim-sim --cmd ${bmark}.alpha.bin --num-cpus=${num_contexts}",
                  );
    }

    foreach my $bm (@bmarks_shared_mem) {
        my ($dir, $bmark) = split('/', $bm);

        my $bm_name = sprintf("%s_%03dt", $bmark, $num_contexts);

        $gcfg->add(name => $bm_name,
                   tree => [ "user_mode" ],
                   setup => "tools/scripts/bmark/setup-hasim-bmark $bm_name --group tests/$dir --isa alpha --binary ${bmark}.alpha.bin --contexts=${num_contexts}",
                   feeder => "m5",
                   feedflags => "m5_configs/se.py --shared-mem --hasim-sim --cmd ${bmark}.alpha.bin --options=${num_contexts} --num-cpus=${num_contexts}",
                  );
    }
}

$gcfg->action(@ARGV);
